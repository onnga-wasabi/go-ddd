// Code generated by mockery. DO NOT EDIT.

package user

import mock "github.com/stretchr/testify/mock"

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// Save provides a mock function with given fields: _a0
func (_m *MockUserRepository) Save(_a0 User) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockUserRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - _a0 User
func (_e *MockUserRepository_Expecter) Save(_a0 interface{}) *MockUserRepository_Save_Call {
	return &MockUserRepository_Save_Call{Call: _e.mock.On("Save", _a0)}
}

func (_c *MockUserRepository_Save_Call) Run(run func(_a0 User)) *MockUserRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(User))
	})
	return _c
}

func (_c *MockUserRepository_Save_Call) Return(_a0 error) *MockUserRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_Save_Call) RunAndReturn(run func(User) error) *MockUserRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
