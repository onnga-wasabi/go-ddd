// Code generated by mockery. DO NOT EDIT.

package user

import (
	register "github.com/onnga-wasabi/go-ddd/sample/application/user/register"
	mock "github.com/stretchr/testify/mock"
)

// MockUserApplicationService is an autogenerated mock type for the UserApplicationService type
type MockUserApplicationService struct {
	mock.Mock
}

type MockUserApplicationService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserApplicationService) EXPECT() *MockUserApplicationService_Expecter {
	return &MockUserApplicationService_Expecter{mock: &_m.Mock}
}

// Register provides a mock function with given fields: _a0
func (_m *MockUserApplicationService) Register(_a0 register.UserRegisterCommand) register.UserRegisterResult {
	ret := _m.Called(_a0)

	var r0 register.UserRegisterResult
	if rf, ok := ret.Get(0).(func(register.UserRegisterCommand) register.UserRegisterResult); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(register.UserRegisterResult)
	}

	return r0
}

// MockUserApplicationService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockUserApplicationService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - _a0 register.UserRegisterCommand
func (_e *MockUserApplicationService_Expecter) Register(_a0 interface{}) *MockUserApplicationService_Register_Call {
	return &MockUserApplicationService_Register_Call{Call: _e.mock.On("Register", _a0)}
}

func (_c *MockUserApplicationService_Register_Call) Run(run func(_a0 register.UserRegisterCommand)) *MockUserApplicationService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(register.UserRegisterCommand))
	})
	return _c
}

func (_c *MockUserApplicationService_Register_Call) Return(_a0 register.UserRegisterResult) *MockUserApplicationService_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserApplicationService_Register_Call) RunAndReturn(run func(register.UserRegisterCommand) register.UserRegisterResult) *MockUserApplicationService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserApplicationService creates a new instance of MockUserApplicationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserApplicationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserApplicationService {
	mock := &MockUserApplicationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
